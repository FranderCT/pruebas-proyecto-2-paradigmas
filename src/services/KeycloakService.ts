// src/services/KeycloakService.ts
import Keycloak from 'keycloak-js';
import { keycloakConfig, keycloakConfigLegacy, keycloakInitOptions } from '../keycloak/keycloak.config';

// Variable para rastrear intentos de inicializaci√≥n
let keycloak: Keycloak | null = null;
let initializationAttempts = 0;
const MAX_INIT_ATTEMPTS = 2;

// Funci√≥n para crear instancia de Keycloak con configuraci√≥n espec√≠fica
const createKeycloakInstance = (config: any): Keycloak => {
  return new Keycloak(config);
};

// Funci√≥n para inicializar Keycloak con manejo de errores mejorado
const initKeycloak = (onAuthenticated: (authenticated: boolean) => void): Promise<boolean> => {
  console.log('üîÑ Iniciando proceso de autenticaci√≥n con Keycloak...');
  
  // Intentar primero con la configuraci√≥n moderna (Keycloak 17+)
  if (!keycloak) {
    keycloak = createKeycloakInstance(keycloakConfig);
    console.log('üì° Usando configuraci√≥n Keycloak 17+ (sin /auth)');
  }

  return keycloak.init(keycloakInitOptions)
    .then((authenticated: boolean) => {
        console.log(authenticated ? '‚úÖ Usuario autenticado exitosamente' : '‚ùå Usuario no autenticado');
        
        if (authenticated) {
          console.log('üîê Token obtenido:', keycloak?.token?.substring(0, 20) + '...');
          
          // Configurar refresh autom√°tico del token
          const tokenRefreshInterval = setInterval(() => {
            if (keycloak) {
              keycloak.updateToken(70).then((refreshed: boolean) => {
                if (refreshed) {
                  console.log('üîÑ Token renovado exitosamente');
                } else {
                  console.log('‚ÑπÔ∏è Token a√∫n v√°lido');
                }
              }).catch((error) => {
                console.error('‚ùå Error al renovar token:', error);
                clearInterval(tokenRefreshInterval);
                console.log('üö™ Cerrando sesi√≥n debido a error en renovaci√≥n de token');
                keycloak?.logout();
              });
            }
          }, 60000); // Verificar cada minuto
        }
        
        onAuthenticated(authenticated);
        return authenticated;
    })
    .catch((err: any) => {
        console.error('‚ùå Error durante la inicializaci√≥n de Keycloak:', err);
        
        // Si es el primer intento y fall√≥, intentar con configuraci√≥n legacy
        if (initializationAttempts < MAX_INIT_ATTEMPTS && err.error === 'invalid_request') {
          initializationAttempts++;
          console.log('üîÑ Reintentando con configuraci√≥n legacy (Keycloak < 17)...');
          
          keycloak = createKeycloakInstance(keycloakConfigLegacy);
          return initKeycloak(onAuthenticated);
        }
        
        // Proporcionar informaci√≥n detallada del error
        console.error('üîç Detalles del error:', {
          error: err.error,
          error_description: err.error_description,
          message: err.message,
          config: keycloak?.authServerUrl || 'No disponible'
        });
        
        onAuthenticated(false);
        throw new Error(`Error de autenticaci√≥n Keycloak: ${err.error || err.message}`);
    });
};

// Funci√≥n para obtener el token de Keycloak
const getToken = (): string | undefined => {
    return keycloak?.token;
};

// Funci√≥n para obtener el refresh token
const getRefreshToken = (): string | undefined => {
    return keycloak?.refreshToken;
};

// Funci√≥n para verificar si el usuario est√° autenticado
const isAuthenticated = (): boolean => {
    return !!(keycloak?.authenticated);
};

// Funci√≥n para obtener los roles del usuario
const getUserRoles = (): string[] => {
    if (keycloak?.tokenParsed && keycloak.tokenParsed.realm_access) {
        return keycloak.tokenParsed.realm_access.roles || [];
    }
    return [];
};

// Funci√≥n para verificar si el usuario tiene un rol espec√≠fico
const hasRole = (role: string): boolean => {
    return getUserRoles().includes(role);
};

// Funci√≥n para cerrar sesi√≥n
const logout = (): void => {
    if (keycloak) {
        keycloak.logout({
            redirectUri: window.location.origin
        });
    } else {
        console.warn('‚ö†Ô∏è Keycloak no est√° inicializado, redirigiendo al inicio');
        window.location.href = window.location.origin;
    }
};

// Funci√≥n para obtener informaci√≥n del usuario
const getUserInfo = (): any => {
    return keycloak?.tokenParsed;
};

// Funci√≥n para obtener el nombre de usuario
const getUsername = (): string | undefined => {
    return keycloak?.tokenParsed?.preferred_username;
};

// Funci√≥n para obtener el email del usuario
const getUserEmail = (): string | undefined => {
    return keycloak?.tokenParsed?.email;
};

// Funci√≥n para renovar el token manualmente
const updateToken = (minValidity: number = 30): Promise<boolean> => {
    if (!keycloak) {
        return Promise.reject(new Error('Keycloak no est√° inicializado'));
    }
    return keycloak.updateToken(minValidity);
};

export { 
    keycloak, 
    initKeycloak, 
    getToken, 
    getRefreshToken,
    isAuthenticated,
    getUserRoles,
    hasRole,
    logout, 
    getUserInfo,
    getUsername,
    getUserEmail,
    updateToken
};
